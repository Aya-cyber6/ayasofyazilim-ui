'use client';

/**
 * This code was generated by v0 by Vercel.
 * @see https://v0.dev/t/bjRyoIzlUob
 * Documentation: https://v0.dev/docs#integrating-generated-code-into-your-nextjs-app
 */

/** Add fonts into your Next.js project:

import { Libre_Franklin } from 'next/font/google'
import { Archivo } from 'next/font/google'

libre_franklin({
  subsets: ['latin'],
  display: 'swap',
})

archivo({
  subsets: ['latin'],
  display: 'swap',
})

To read more about using these font, please visit the Next.js documentation:
- App Directory: https://nextjs.org/docs/app/building-your-application/optimizing/fonts
- Pages Directory: https://nextjs.org/docs/pages/building-your-application/optimizing/fonts
* */

/** Add border radius CSS variable to your global CSS:

:root {
  --radius: 0.5rem;
}
* */
import React from 'react';
import { ChevronDown, ChevronUp } from 'lucide-react';
import { Row } from '@tanstack/react-table';
import { beautifyObjectName } from '../../organisms/auto-form/utils';
import { Card } from '@/components/ui/card';
import { TabsTrigger, TabsList, TabsContent, Tabs } from '@/components/ui/tabs';
import {
  TableHead,
  TableRow,
  TableHeader,
  TableCell,
  TableBody,
  Table,
} from '@/components/ui/table';
import { issueFormProps, Tag } from './type';
import Cards from './cards';
import DataTable from '../tables';

export type { issueFormProps } from './type';

const subTable = ({ row }: { row: Row<Tag['Invoices'][0]> }) => (
  <DataTable
    showView={false}
    data={row.original.InvoiceLines}
    columnsData={{
      type: 'Custom',
      data: {
        columns: [
          {
            header: 'ID',
            accessorKey: 'Id',
          },
          {
            header: 'Product Group',
            accessorKey: 'ProductGroup.Description',
          },
          {
            header: 'Vat Base',
            accessorKey: 'Vat.VatBase',
          },
          {
            header: 'Vat Rate',
            accessorKey: 'Vat.Rate',
          },
          {
            header: 'Amount',
            accessorKey: 'Amount',
          },
        ],
      },
    }}
  />
);

const expandComponent = ({ row }: { row: Row<unknown> }) =>
  row.getCanExpand() ? (
    <button
      className="flex cursor-pointer"
      {...{
        onClick: row.getToggleExpandedHandler(),
      }}
      type="button"
    >
      {row.getIsExpanded() ? (
        <ChevronUp className="text-muted-foreground" />
      ) : (
        <ChevronDown className="text-muted-foreground" />
      )}
    </button>
  ) : (
    ''
  );

export default function Issueform({ tag }: issueFormProps) {
  const tagInvoiceColumns = [
    {
      id: 'expander',
      header: () => null,
      cell: expandComponent,
    },
    {
      header: 'Invoice ID',
      accessorKey: 'Id',
    },
    {
      header: 'Invoice Amount',
      accessorKey: 'TotalAmount',
    },
    {
      header: 'Currency',
      accessorKey: 'Currency.Currency',
    },
  ];
  return (
    <div className="grid grid-cols-1 md:grid-cols-[1fr_300px] gap-6 p-6 w-full">
      <div className="grid gap-6">
        <Card className="p-6">
          <div className="grid gap-4">
            <div className="flex items-center justify-between">
              <h2 className="text-2xl font-bold">Tag summary</h2>
              <div className="flex items-center gap-2">
                <CalendarDaysIcon className="w-5 h-5 text-gray-500 " />
                <span className="text-sm text-gray-500 ">
                  {tag.Summary.IssuedDate} - {tag.Summary.ExpireDate}
                </span>
              </div>
            </div>
            <div className="grid sm:grid-cols-2 lg:grid-cols-3 gap-4">
              <div className="bg-gray-100  rounded-lg p-4 flex flex-col gap-2">
                <div className="text-sm text-gray-500 ">Tax Free Tag ID</div>
                <div className="text-3xl font-bold">{tag.Summary.Tag}</div>
              </div>
              <div className="bg-gray-100  rounded-lg p-4 flex flex-col gap-2">
                <div className="text-sm text-gray-500 ">Status</div>
                <div className="text-3xl font-bold">
                  {tag.Summary.Status === 1 ? 'Approved' : 'Pending'}
                </div>
              </div>
              <div className="bg-gray-100  rounded-lg p-4 flex flex-col gap-2">
                <div className="text-sm text-gray-500 ">Issued Date</div>
                <div className="text-xl font-bold">
                  {tag.Summary.IssuedDate}
                </div>
                <div className="text-sm text-gray-500 ">Expire Date</div>
                <div className="text-xl font-bold">
                  {tag.Summary.ExpireDate}
                </div>
              </div>
            </div>
            <div className="grid sm:grid-cols-3 gap-4">
              <Cards
                content={Object.entries(tag.ExportValidation).map(
                  ([key, value]) => ({
                    title: beautifyObjectName(key),
                    info: String(value),
                  })
                )}
                title="Export Validation"
              />
              <Cards
                content={Object.entries(tag.Refund).map(([key, value]) => {
                  if (typeof value === 'object') {
                    return {
                      title: beautifyObjectName(key),
                      info: value.Name,
                    };
                  }
                  return {
                    title: beautifyObjectName(key),
                    info: String(value),
                  };
                })}
                title="Refund"
              />
              <Cards
                content={Object.entries(tag.Invoicing).map(([key, value]) => ({
                  title: beautifyObjectName(key),
                  info: String(value),
                }))}
                title="Invoicing"
              />
            </div>
          </div>
        </Card>
        <div className="border shadow-sm rounded-lg overflow-hidden">
          <Tabs defaultValue="merchants">
            <TabsList className="bg-gray-100  grid grid-cols-3">
              <TabsTrigger value="merchants">Purchase Details</TabsTrigger>
              <TabsTrigger value="travelers">Tag History</TabsTrigger>
              <TabsTrigger value="trips">Export Validation</TabsTrigger>
            </TabsList>
            <TabsContent value="merchants">
              <div className="grid grid-cols-2 md:grid-cols-[1fr_300px] gap-6 p-6">
                <Cards
                  content={tag.Totals.map((total) => ({
                    title: total.Description,
                    info: String(total.Amount),
                  }))}
                  title="TOTALS"
                  cardParams={{
                    className: 'max-w-80',
                  }}
                />
                <Cards
                  content={tag.Earnings.map((earning) => ({
                    title: earning.Description,
                    info: String(earning.Amount),
                  }))}
                  title="EARNINGS"
                  cardParams={{
                    className: 'max-w-80',
                  }}
                />
              </div>
            </TabsContent>
            <TabsContent value="travelers">
              <div className="m-2 p-1">
                <DataTable
                  data={tag.Invoices}
                  columnsData={{
                    type: 'Custom',
                    data: {
                      columns: tagInvoiceColumns,
                    },
                  }}
                  showView={false}
                  renderSubComponent={subTable}
                />
              </div>
            </TabsContent>
            <TabsContent value="trips">
              <Table>
                <TableHeader>
                  <TableRow>
                    <TableHead>Created on</TableHead>
                    <TableHead>Scan by</TableHead>
                    <TableHead>Matchd</TableHead>
                    <TableHead>Hit</TableHead>
                    <TableHead>Revalidated</TableHead>
                  </TableRow>
                </TableHeader>
                <TableBody>
                  <TableRow>
                    <TableCell className="font-medium">12.1.1990</TableCell>
                    <TableCell>Tom Wilson</TableCell>
                    <TableCell>✅</TableCell>
                    <TableCell>✅</TableCell>
                    <TableCell>✅</TableCell>
                  </TableRow>
                </TableBody>
              </Table>
            </TabsContent>
          </Tabs>
        </div>
      </div>
      <div className="grid gap-6">
        <Cards
          content={Object.entries(tag.Merchant).map(([key, value]) => {
            const IconsMap: Record<string, JSX.Element> = {
              Id: <UserIcon className="w-5 h-5 text-gray-500 " />,
              Address: <MapPinIcon className="w-5 h-5 text-gray-500 " />,
              Name: <UserIcon className="w-5 h-5 text-gray-500 " />,
              ProductGroups: <MailIcon className="w-5 h-5 text-gray-500 " />,
            };

            if (Array.isArray(value)) {
              return {
                title: beautifyObjectName(key),
                info: value.map((item) => item.Description).join(', '),
                icon: IconsMap[key],
              };
            }
            if (typeof value === 'object') {
              return {
                title: beautifyObjectName(key),
                info: value.FullText,
                icon: IconsMap[key],
              };
            }
            return {
              title: beautifyObjectName(key),
              info: String(value),
              icon: IconsMap[key],
            };
          })}
          title="Merchant Details"
          cta={{
            title: 'View Merchant',
            onClick: () => {},
          }}
        />
        <Cards
          title="Traveler Details"
          content={Object.entries(tag.Traveller).map(([key, value]) => {
            const pass = [
              'TravelDocumentNumber',
              'CountryOfResidenceCode',
              'NationalityCode',
              'Id',
            ];
            if (pass.includes(key)) {
              // pass this key
              return undefined;
            }
            const IconsMap: Record<string, JSX.Element> = {
              Name: <UserIcon className="w-5 h-5 text-gray-500 " />,
              Surname: <UserIcon className="w-5 h-5 text-gray-500 " />,
              CountryOfResidence: (
                <MapPinIcon className="w-5 h-5 text-gray-500 " />
              ),
              Nationality: <MapPinIcon className="w-5 h-5 text-gray-500 " />,
            };
            if (key === 'CountryOfResidence') {
              return {
                title: beautifyObjectName('Residency'),
                info: String(value),
                icon: IconsMap[key],
              };
            }
            return {
              title: beautifyObjectName(key),
              info: String(value),
              icon: IconsMap[key],
            };
          })}
          cta={{
            title: 'View Traveler',
            onClick: () => {},
          }}
        />
        <Cards
          title="Trip Details"
          cta={{
            title: 'View Trip',
            onClick: () => {},
          }}
          content={Object.entries(tag.Trip).map(([key, value]) => {
            const _key = key as keyof Tag['Trip'];
            const IconsMap: Record<keyof Tag['Trip'], JSX.Element> = {
              FlightNumber: <MapPinIcon className="w-5 h-5 text-gray-500 " />,
              DepartingAirport: (
                <PlaneIcon className="w-5 h-5 text-gray-500 " />
              ),
              DestinationAirport: (
                <PlaneIcon className="w-5 h-5 text-gray-500 " />
              ),
              DepartureDate: (
                <CalendarDaysIcon className="w-5 h-5 text-gray-500 " />
              ),
              VisitingDate: (
                <CalendarDaysIcon className="w-5 h-5 text-gray-500 " />
              ),
              Id: <UserIcon className="w-5 h-5 text-gray-500 " />,
            };
            if (typeof value === 'object') {
              return {
                title: beautifyObjectName(_key),
                info: value.Name,
                icon: IconsMap[_key],
              };
            }
            return {
              title: beautifyObjectName(_key),
              info: String(value),
              icon: IconsMap[_key],
            };
          })}
        />
      </div>
    </div>
  );
}

const CalendarDaysIcon = (props: React.HTMLAttributes<SVGSVGElement>) => (
  <svg
    {...props}
    xmlns="http://www.w3.org/2000/svg"
    width="24"
    height="24"
    viewBox="0 0 24 24"
    fill="none"
    stroke="currentColor"
    strokeWidth="2"
    strokeLinecap="round"
    strokeLinejoin="round"
  >
    <path d="M8 2v4" />
    <path d="M16 2v4" />
    <rect width="18" height="18" x="3" y="4" rx="2" />
    <path d="M3 10h18" />
    <path d="M8 14h.01" />
    <path d="M12 14h.01" />
    <path d="M16 14h.01" />
    <path d="M8 18h.01" />
    <path d="M12 18h.01" />
    <path d="M16 18h.01" />
  </svg>
);

const MailIcon = (props: React.HTMLAttributes<SVGSVGElement>) => (
  <svg
    {...props}
    xmlns="http://www.w3.org/2000/svg"
    width="24"
    height="24"
    viewBox="0 0 24 24"
    fill="none"
    stroke="currentColor"
    strokeWidth="2"
    strokeLinecap="round"
    strokeLinejoin="round"
  >
    <rect width="20" height="16" x="2" y="4" rx="2" />
    <path d="m22 7-8.97 5.7a1.94 1.94 0 0 1-2.06 0L2 7" />
  </svg>
);

const MapPinIcon = (props: React.HTMLAttributes<SVGSVGElement>) => (
  <svg
    {...props}
    xmlns="http://www.w3.org/2000/svg"
    width="24"
    height="24"
    viewBox="0 0 24 24"
    fill="none"
    stroke="currentColor"
    strokeWidth="2"
    strokeLinecap="round"
    strokeLinejoin="round"
  >
    <path d="M20 10c0 6-8 12-8 12s-8-6-8-12a8 8 0 0 1 16 0Z" />
    <circle cx="12" cy="10" r="3" />
  </svg>
);

const PlaneIcon = (props: React.HTMLAttributes<SVGSVGElement>) => (
  <svg
    {...props}
    xmlns="http://www.w3.org/2000/svg"
    width="24"
    height="24"
    viewBox="0 0 24 24"
    fill="none"
    stroke="currentColor"
    strokeWidth="2"
    strokeLinecap="round"
    strokeLinejoin="round"
  >
    <path d="M17.8 19.2 16 11l3.5-3.5C21 6 21.5 4 21 3c-1-.5-3 0-4.5 1.5L13 8 4.8 6.2c-.5-.1-.9.1-1.1.5l-.3.5c-.2.5-.1 1 .3 1.3L9 12l-2 3H4l-1 1 3 2 2 3 1-1v-3l3-2 3.5 5.3c.3.4.8.5 1.3.3l.5-.2c.4-.3.6-.7.5-1.2z" />
  </svg>
);

const UserIcon = (props: React.HTMLAttributes<SVGSVGElement>) => (
  <svg
    {...props}
    xmlns="http://www.w3.org/2000/svg"
    width="24"
    height="24"
    viewBox="0 0 24 24"
    fill="none"
    stroke="currentColor"
    strokeWidth="2"
    strokeLinecap="round"
    strokeLinejoin="round"
  >
    <path d="M19 21v-2a4 4 0 0 0-4-4H9a4 4 0 0 0-4 4v2" />
    <circle cx="12" cy="7" r="4" />
  </svg>
);
